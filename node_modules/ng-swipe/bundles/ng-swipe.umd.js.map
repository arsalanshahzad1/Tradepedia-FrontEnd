{"version":3,"file":"ng-swipe.umd.js","sources":["ng://ng-swipe/lib/swipe.directive.ts","ng://ng-swipe/lib/swipe.module.ts"],"sourcesContent":["/**\r\n * Directive should be added to HTML element that swipe action is listened on.\r\n * Callback function should be attached to host event 'swipeMove' or'swipeEnd' event depending on required functionality.\r\n * Event object contains two properties:\r\n * [direction]: 'y' | 'x'  - defines swipe direction is vertical or horizontal\r\n * [distance]: number - defines swipe length in pixels\r\n */\r\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { elementAt, filter, map, switchMap, take, takeUntil, takeWhile, tap } from 'rxjs/operators';\r\nimport { SwipeCoordinates, SwipeDirection, SwipeEvent } from './interfaces';\r\n\r\n@Directive({\r\n  selector: '[ngSwipe]'\r\n})\r\n\r\nexport class SwipeDirective implements OnInit, OnDestroy {\r\n\r\n  @Output() swipeMove: EventEmitter<SwipeEvent> = new EventEmitter<SwipeEvent>();\r\n  @Output() swipeEnd: EventEmitter<SwipeEvent> = new EventEmitter<SwipeEvent>();\r\n\r\n  /**\r\n   * Property used to unsubscribe from all subscriptions on destroy event\r\n   */\r\n  private alive = true;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private zone: NgZone\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const domElement = this.elementRef.nativeElement;\r\n    \r\n    const touchStarts: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchstart').pipe(map(this.touchEventToCoordinate));\r\n    const touchMoves: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchmove').pipe(map(this.touchEventToCoordinate));\r\n    const touchEnds: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchend').pipe(map(this.touchEventToCoordinate));\r\n    \r\n    /**\r\n     * Move starts with direction: Pair the move start events with the 3rd subsequent move event,\r\n     * but only if no touch end event happens in between\r\n     */\r\n    const moveStartsWithDirection = touchStarts.pipe(\r\n      switchMap((dragStartEvent: SwipeCoordinates) => touchMoves.pipe(\r\n        elementAt(3),\r\n        map((dragEvent: SwipeCoordinates) => {\r\n          const intialDeltaX = dragEvent.x - dragStartEvent.x;\r\n          const initialDeltaY = dragEvent.y - dragStartEvent.y;\r\n          return {x: dragStartEvent.x, y: dragStartEvent.y, intialDeltaX, initialDeltaY};\r\n        })\r\n    )));\r\n\r\n    /**\r\n     * Vertical move starts: Keep only those move start events\r\n     * where the 3rd subsequent move event is rather vertical than horizontal\r\n     */\r\n    const verticalMoveStarts = moveStartsWithDirection.pipe(\r\n      filter(dragStartEvent => Math.abs(dragStartEvent.intialDeltaX) < Math.abs(dragStartEvent.initialDeltaY)\r\n    ));\r\n\r\n    /**\r\n     * Horizontal move starts: Keep only those move start events\r\n     * where the 3rd subsequent move event is rather horizontal than vertical\r\n     */\r\n    const horizontalMoveStarts = moveStartsWithDirection.pipe(\r\n      filter(dragStartEvent => Math.abs(dragStartEvent.intialDeltaX) >= Math.abs(dragStartEvent.initialDeltaY))\r\n    );\r\n\r\n    /**\r\n     * Take the moves until touch ends\r\n     * On move end emit swipe end event to parent element\r\n     */\r\n    const movesUntilEnds = (dragStartEvent: any, direction: SwipeDirection) => touchMoves.pipe(\r\n      map(dragEvent => this.getSwipeDistance(dragStartEvent, dragEvent)),\r\n      takeUntil(touchEnds.pipe(\r\n        take(1),\r\n        map(dragEndEvent => this.getSwipeDistance(dragStartEvent, dragEndEvent)),\r\n        tap((coordinates: SwipeCoordinates) => this.emitSwipeEndEvent(direction, coordinates))\r\n    )));\r\n\r\n    const verticalMoves = verticalMoveStarts.pipe(\r\n      switchMap(dragStartEvent => movesUntilEnds(dragStartEvent, 'y'))\r\n    );\r\n    const horizontalMoves = horizontalMoveStarts.pipe(\r\n      switchMap(dragStartEvent => movesUntilEnds(dragStartEvent, 'x'))\r\n    );\r\n    \r\n    /**\r\n     * Run swipe subscriptions outside zone for better performance\r\n     * On move emit swipe move event to parent element\r\n     */\r\n    this.zone.runOutsideAngular(() => {\r\n      verticalMoves.pipe(\r\n        takeWhile(() => this.alive)\r\n      ).subscribe((coordinates: SwipeCoordinates) => this.emitSwipeMoveEvent('y', coordinates));\r\n  \r\n      horizontalMoves.pipe(\r\n        takeWhile(() => this.alive)\r\n      ).subscribe((coordinates: SwipeCoordinates) => this.emitSwipeMoveEvent('x', coordinates));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set alive property to false to unsubscribe from all subscriptions\r\n   */\r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n\r\n  /**\r\n   * Format touch event to coordinates object that is easier to read\r\n   */\r\n  public touchEventToCoordinate(touchEvent: TouchEvent): SwipeCoordinates  {\r\n    return {\r\n      x: touchEvent.changedTouches[0].clientX,\r\n      y: touchEvent.changedTouches[0].clientY\r\n    };\r\n  }\r\n  \r\n  private getSwipeDistance(dragStartEvent, dragEvent): SwipeCoordinates {\r\n    return {\r\n      x: dragEvent.x - dragStartEvent.x,\r\n      y: dragEvent.y - dragStartEvent.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Emits swipe move event with calculated direction and distance\r\n   */\r\n  private emitSwipeMoveEvent(direction: SwipeDirection, coordinates: SwipeCoordinates) {\r\n    this.swipeMove.emit({direction, distance: coordinates[direction]});\r\n  }\r\n\r\n  /**\r\n   * Emits swipe move event with calculated direction and distance\r\n   */\r\n  private emitSwipeEndEvent(direction: SwipeDirection, coordinates: SwipeCoordinates) {\r\n    this.swipeEnd.emit({direction, distance: coordinates[direction]});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { SwipeDirective } from './swipe.directive';\n\n@NgModule({\n  declarations: [SwipeDirective],\n  exports: [SwipeDirective]\n})\nexport class SwipeModule { }\n"],"names":["EventEmitter","fromEvent","map","switchMap","elementAt","filter","takeUntil","take","tap","takeWhile","Directive","ElementRef","NgZone","Output","NgModule"],"mappings":"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"}