{"version":3,"sources":["ng://ng-swipe/lib/swipe.directive.ts","ng://ng-swipe/lib/swipe.module.ts"],"names":["SwipeDirective","elementRef","zone","this","swipeMove","EventEmitter","swipeEnd","alive","prototype","ngOnInit","_this","domElement","nativeElement","touchStarts","fromEvent","pipe","map","touchEventToCoordinate","touchMoves","touchEnds","moveStartsWithDirection","switchMap","dragStartEvent","elementAt","dragEvent","intialDeltaX","x","initialDeltaY","y","verticalMoveStarts","filter","Math","abs","horizontalMoveStarts","movesUntilEnds","direction","getSwipeDistance","takeUntil","take","dragEndEvent","tap","coordinates","emitSwipeEndEvent","verticalMoves","horizontalMoves","runOutsideAngular","takeWhile","subscribe","emitSwipeMoveEvent","ngOnDestroy","touchEvent","changedTouches","clientX","clientY","emit","distance","Directive","args","selector","ElementRef","NgZone","Output","SwipeModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * Directive should be added to HTML element that swipe action is listened on.\r\n * Callback function should be attached to host event 'swipeMove' or'swipeEnd' event depending on required functionality.\r\n * Event object contains two properties:\r\n * [direction]: 'y' | 'x'  - defines swipe direction is vertical or horizontal\r\n * [distance]: number - defines swipe length in pixels\r\n */\r\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { elementAt, filter, map, switchMap, take, takeUntil, takeWhile, tap } from 'rxjs/operators';\r\nimport { SwipeCoordinates, SwipeDirection, SwipeEvent } from './interfaces';\r\n\r\n@Directive({\r\n  selector: '[ngSwipe]'\r\n})\r\n\r\nexport class SwipeDirective implements OnInit, OnDestroy {\r\n\r\n  @Output() swipeMove: EventEmitter<SwipeEvent> = new EventEmitter<SwipeEvent>();\r\n  @Output() swipeEnd: EventEmitter<SwipeEvent> = new EventEmitter<SwipeEvent>();\r\n\r\n  /**\r\n   * Property used to unsubscribe from all subscriptions on destroy event\r\n   */\r\n  private alive = true;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private zone: NgZone\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    const domElement = this.elementRef.nativeElement;\r\n    \r\n    const touchStarts: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchstart').pipe(map(this.touchEventToCoordinate));\r\n    const touchMoves: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchmove').pipe(map(this.touchEventToCoordinate));\r\n    const touchEnds: Observable<SwipeCoordinates> = fromEvent(domElement, 'touchend').pipe(map(this.touchEventToCoordinate));\r\n    \r\n    /**\r\n     * Move starts with direction: Pair the move start events with the 3rd subsequent move event,\r\n     * but only if no touch end event happens in between\r\n     */\r\n    const moveStartsWithDirection = touchStarts.pipe(\r\n      switchMap((dragStartEvent: SwipeCoordinates) => touchMoves.pipe(\r\n        elementAt(3),\r\n        map((dragEvent: SwipeCoordinates) => {\r\n          const intialDeltaX = dragEvent.x - dragStartEvent.x;\r\n          const initialDeltaY = dragEvent.y - dragStartEvent.y;\r\n          return {x: dragStartEvent.x, y: dragStartEvent.y, intialDeltaX, initialDeltaY};\r\n        })\r\n    )));\r\n\r\n    /**\r\n     * Vertical move starts: Keep only those move start events\r\n     * where the 3rd subsequent move event is rather vertical than horizontal\r\n     */\r\n    const verticalMoveStarts = moveStartsWithDirection.pipe(\r\n      filter(dragStartEvent => Math.abs(dragStartEvent.intialDeltaX) < Math.abs(dragStartEvent.initialDeltaY)\r\n    ));\r\n\r\n    /**\r\n     * Horizontal move starts: Keep only those move start events\r\n     * where the 3rd subsequent move event is rather horizontal than vertical\r\n     */\r\n    const horizontalMoveStarts = moveStartsWithDirection.pipe(\r\n      filter(dragStartEvent => Math.abs(dragStartEvent.intialDeltaX) >= Math.abs(dragStartEvent.initialDeltaY))\r\n    );\r\n\r\n    /**\r\n     * Take the moves until touch ends\r\n     * On move end emit swipe end event to parent element\r\n     */\r\n    const movesUntilEnds = (dragStartEvent: any, direction: SwipeDirection) => touchMoves.pipe(\r\n      map(dragEvent => this.getSwipeDistance(dragStartEvent, dragEvent)),\r\n      takeUntil(touchEnds.pipe(\r\n        take(1),\r\n        map(dragEndEvent => this.getSwipeDistance(dragStartEvent, dragEndEvent)),\r\n        tap((coordinates: SwipeCoordinates) => this.emitSwipeEndEvent(direction, coordinates))\r\n    )));\r\n\r\n    const verticalMoves = verticalMoveStarts.pipe(\r\n      switchMap(dragStartEvent => movesUntilEnds(dragStartEvent, 'y'))\r\n    );\r\n    const horizontalMoves = horizontalMoveStarts.pipe(\r\n      switchMap(dragStartEvent => movesUntilEnds(dragStartEvent, 'x'))\r\n    );\r\n    \r\n    /**\r\n     * Run swipe subscriptions outside zone for better performance\r\n     * On move emit swipe move event to parent element\r\n     */\r\n    this.zone.runOutsideAngular(() => {\r\n      verticalMoves.pipe(\r\n        takeWhile(() => this.alive)\r\n      ).subscribe((coordinates: SwipeCoordinates) => this.emitSwipeMoveEvent('y', coordinates));\r\n  \r\n      horizontalMoves.pipe(\r\n        takeWhile(() => this.alive)\r\n      ).subscribe((coordinates: SwipeCoordinates) => this.emitSwipeMoveEvent('x', coordinates));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set alive property to false to unsubscribe from all subscriptions\r\n   */\r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n\r\n  /**\r\n   * Format touch event to coordinates object that is easier to read\r\n   */\r\n  public touchEventToCoordinate(touchEvent: TouchEvent): SwipeCoordinates  {\r\n    return {\r\n      x: touchEvent.changedTouches[0].clientX,\r\n      y: touchEvent.changedTouches[0].clientY\r\n    };\r\n  }\r\n  \r\n  private getSwipeDistance(dragStartEvent, dragEvent): SwipeCoordinates {\r\n    return {\r\n      x: dragEvent.x - dragStartEvent.x,\r\n      y: dragEvent.y - dragStartEvent.y\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Emits swipe move event with calculated direction and distance\r\n   */\r\n  private emitSwipeMoveEvent(direction: SwipeDirection, coordinates: SwipeCoordinates) {\r\n    this.swipeMove.emit({direction, distance: coordinates[direction]});\r\n  }\r\n\r\n  /**\r\n   * Emits swipe move event with calculated direction and distance\r\n   */\r\n  private emitSwipeEndEvent(direction: SwipeDirection, coordinates: SwipeCoordinates) {\r\n    this.swipeEnd.emit({direction, distance: coordinates[direction]});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { SwipeDirective } from './swipe.directive';\n\n@NgModule({\n  declarations: [SwipeDirective],\n  exports: [SwipeDirective]\n})\nexport class SwipeModule { }\n"]}