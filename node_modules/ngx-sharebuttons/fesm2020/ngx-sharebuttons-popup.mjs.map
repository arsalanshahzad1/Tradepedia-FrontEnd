{"version":3,"file":"ngx-sharebuttons-popup.mjs","sources":["../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.model.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.html","../../../projects/ngx-sharebuttons/popup/src/share-popup.service.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup-buttons.directive.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup.component.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.module.ts","../../../projects/ngx-sharebuttons/popup/src/ngx-sharebuttons-popup.ts"],"sourcesContent":["import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface SharePopupOptions {\n  show: number;\n  theme: string;\n  include: string[];\n  exclude: string[];\n  url: string;\n  title: string;\n  description: string;\n  image: string;\n  tags: string;\n  autoSetMeta: boolean;\n  showIcon: boolean;\n  showText: boolean;\n  disabled: boolean;\n  opened: EventEmitter<string>;\n  closed: EventEmitter<string>;\n  closeIcon?: string | string[];\n  closeClick: EventEmitter<void>;\n  hasBackdrop?: boolean;\n  backdropClass?: string;\n}\n\nexport const SHARE_POPUP_OPTIONS = new InjectionToken<SharePopupOptions>('SHARE_POPUP_OPTIONS');\n","import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\n\n@Component({\n  selector: 'share-buttons-popup',\n  templateUrl: './share-buttons-popup.html',\n  styleUrls: ['./share-buttons-popup.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.role]': 'role',\n    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.aria-describedby]': 'ariaDescribedBy || null'\n  }\n})\nexport class ShareButtonsPopup implements AfterViewInit, OnDestroy {\n\n  /** Overlay ref to close the lightbox */\n  overlayRef: OverlayRef;\n\n  /** The ARIA role of the lightbox element. */\n  role: string;\n\n  /** Aria label to assign to the lightbox element */\n  ariaLabel: string;\n\n  /** ID of the element that should be considered as the lightbox's label. */\n  ariaLabelledBy: string;\n\n  /** ID of the element that describes the lightbox. */\n  ariaDescribedBy: string;\n\n  /** The class that traps and manages focus within the lightbox. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the lightbox was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement;\n\n  get isBtnCopy(): boolean {\n    return this.options.exclude && this.options.exclude.filter((btn: string) => btn === 'copy').length > 0;\n  }\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(SHARE_POPUP_OPTIONS) public options: SharePopupOptions,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _elementRef: ElementRef) {\n    this._savePreviouslyFocusedElement();\n  }\n\n  ngAfterViewInit() {\n    this._trapFocus();\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  ngOnDestroy() {\n    this.overlayRef.dispose();\n    this._restoreFocus();\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Saves a reference to the element that was focused before the lightbox was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the lightbox opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n}\n","<div class=\"sb-overlay\">\n  <h3>Share</h3>\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\n    <span>{{ shareButton?.url }}</span>\n  </div>\n\n  <share-buttons [include]=\"options?.include\"\n                 [exclude]=\"options?.exclude\"\n                 [theme]=\"options?.theme\"\n                 [url]=\"options?.url\"\n                 [title]=\"options?.title\"\n                 [description]=\"options?.description\"\n                 [image]=\"options?.image\"\n                 [tags]=\"options?.tags\"\n                 [autoSetMeta]=\"options?.autoSetMeta\"\n                 [show]=\"options?.show\"\n                 [showIcon]=\"options?.showIcon\"\n                 [showText]=\"options?.showText\"\n                 (opened)=\"options?.opened?.emit($event)\"\n                 (closed)=\"options?.closed?.emit($event)\"\n                 [disabled]=\"options?.disabled\">\n  </share-buttons>\n\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\n  </div>\n\n</div>\n","import { ComponentRef, Injectable, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ShareButtonsPopup } from './share-buttons-popup';\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\n\n@Injectable()\nexport class SharePopupService {\n\n  private _overlayRef: OverlayRef;\n\n  constructor(private _overlay: Overlay, private _injector: Injector) {\n  }\n\n  open(config?: SharePopupOptions) {\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      this._overlayRef = this._overlay.create({\n        backdropClass: 'sb-backdrop',\n        hasBackdrop: true,\n        panelClass: '',\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n        scrollStrategy: this._overlay.scrollStrategies.block(),\n        disposeOnNavigation: true\n      });\n      const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));\n      const sharePopupRef: ComponentRef<ShareButtonsPopup> = this._overlayRef.attach(popupComponentPortal);\n      sharePopupRef.instance.overlayRef = this._overlayRef;\n\n      if (config.hasBackdrop) {\n        this._overlayRef.backdropClick().subscribe(() => this.close());\n      }\n    }\n  }\n\n  /**\n   * Close Share Popup Overlay\n   */\n  close() {\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n  }\n\n  private createInjector(dataToPass: SharePopupOptions): Injector {\n    return Injector.create({\n      parent: this._injector,\n      providers: [\n        { provide: SHARE_POPUP_OPTIONS, useValue: dataToPass }\n      ]\n    });\n  }\n\n}\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { SharePopupService } from './share-popup.service';\n\nimport { ShareService, SHARE_BUTTONS } from 'ngx-sharebuttons';\n\n@Directive({\n  selector: '[shareButtonsPopup]'\n})\nexport class SharePopupButtonsDirective implements OnDestroy {\n\n  @Input() theme: string = this._share.config.theme;\n\n  @Input() include: string[] = Object.keys(SHARE_BUTTONS);\n\n  @Input() exclude!: string[];\n\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\n\n  /** The sharing link */\n  @Input() url: string;\n\n  /** The title parameter */\n  @Input() title: string;\n\n  /** The description parameter */\n  @Input() description: string;\n\n  /** The image parameter for sharing on Pinterest */\n  @Input() image: string;\n\n  /** The tags parameter for sharing on Twitter and Tumblr */\n  @Input() tags: string;\n\n  /** Sets meta tags from document head, useful when SEO is available */\n  @Input() autoSetMeta: boolean;\n\n  @Input() show: number;\n\n  /** Show buttons icons */\n  @Input() showIcon = true;\n\n  /** Show buttons text */\n  @Input() showText = false;\n\n  /** A flag that indicates if the button's click is disabled */\n  @Input() disabled: boolean;\n\n  @Input() hasBackdrop = true;\n\n  @Input() backdropClass: string;\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  // Stream that emits when the share popup is closed\n  @Output() popupClosed = new EventEmitter<void>();\n\n  private _popupClosed = this.popupClosed.subscribe(() => this.close());\n\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\n  }\n\n  @HostListener('click', ['$event']) onClick(e) {\n    this._sharePopup.open({\n      theme: this.theme,\n      include: this.include,\n      exclude: this.exclude,\n      url: this.url,\n      title: this.title,\n      description: this.description,\n      image: this.image,\n      tags: this.tags,\n      autoSetMeta: this.autoSetMeta,\n      show: this.show,\n      showIcon: this.showIcon,\n      showText: this.showText,\n      disabled: this.disabled,\n      opened: this.opened,\n      closed: this.closed,\n      closeIcon: this.closeIcon,\n      closeClick: this.popupClosed,\n      hasBackdrop: this.hasBackdrop,\n      backdropClass: this.backdropClass\n    });\n  }\n\n  ngOnDestroy() {\n    this._popupClosed.unsubscribe();\n  }\n\n  close() {\n    this._sharePopup.close();\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { SharePopupService } from './share-popup.service';\n\nimport { ShareService } from 'ngx-sharebuttons';\n\n@Component({\n  selector: 'share-popup-button',\n  template: `\n    <div class=\"sb-button sb-{{theme}}\">\n      <button shareButtonsPopup\n              class=\"sb-wrapper\"\n              [class.sb-show-icon]=\"showIcon\"\n              [class.sb-show-text]=\"showText\"\n              [theme]=\"theme\"\n              [include]=\"include\"\n              [exclude]=\"exclude\"\n              [show]=\"show\"\n              [url]=\"url\"\n              [showIcon]=\"showIcon\"\n              [showText]=\"showText\"\n              [tags]=\"tags\"\n              [autoSetMeta]=\"autoSetMeta\"\n              [title]=\"title\"\n              [description]=\"description\"\n              [image]=\"image\"\n              (closed)=\"closed.emit($event)\"\n              (opened)=\"opened.emit($event)\">\n        <div class=\"sb-content\">\n\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <fa-icon [icon]=\"icon\" [fixedWidth]=\"true\"></fa-icon>\n          </div>\n\n          <div *ngIf=\"showText\" class=\"sb-text\">\n            {{ text }}\n          </div>\n\n        </div>\n      </button>\n    </div>\n  `,\n  styleUrls: ['./share-popup.component.scss', '../../button/src/share-button.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SharePopupComponent {\n\n  @Input() theme: string = this._share.config.theme;\n\n  @Input() icon: string | string[] = ['fas', 'share'];\n\n  @Input() text: string = 'Share';\n\n  @Input() include!: string[];\n\n  @Input() exclude!: string[];\n\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\n\n  /** The sharing link */\n  @Input() url: string;\n\n  /** The title parameter */\n  @Input() title: string;\n\n  /** The description parameter */\n  @Input() description: string;\n\n  /** The image parameter for sharing on Pinterest */\n  @Input() image: string;\n\n  /** The tags parameter for sharing on Twitter and Tumblr */\n  @Input() tags: string;\n\n  /** Sets meta tags from document head, useful when SEO is available */\n  @Input() autoSetMeta: boolean;\n\n  @Input() show: number;\n\n  /** Show buttons icons */\n  @Input() showIcon = true;\n\n  /** Show buttons text */\n  @Input() showText = false;\n\n  /** A flag that indicates if the button's click is disabled */\n  @Input() disabled: boolean;\n\n  @Input() hasBackdrop = true;\n\n  @Input() backdropClass: string;\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  // Stream that emits when the share popup is closed\n  @Output() popupClosed = new EventEmitter<void>();\n\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';\nimport { ShareButtonsModule } from 'ngx-sharebuttons/buttons';\n\nimport { ShareButtonsPopup } from './share-buttons-popup';\nimport { SharePopupService } from './share-popup.service';\nimport { SharePopupButtonsDirective } from './share-popup-buttons.directive';\nimport { SharePopupComponent } from './share-popup.component';\n\n@NgModule({\n  declarations: [\n    ShareButtonsPopup,\n    SharePopupButtonsDirective,\n    SharePopupComponent\n  ],\n  imports: [\n    CommonModule,\n    ShareButtonsModule\n  ],\n  exports: [\n    ShareButtonsModule,\n    ShareButtonsPopup,\n    SharePopupButtonsDirective,\n    SharePopupComponent\n  ],\n  providers: [\n    SharePopupService\n  ]\n})\nexport class ShareButtonsPopupModule {\n  static withConfig(config?: ShareButtonsConfig): ModuleWithProviders<ShareButtonsModule> {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [{provide: SHARE_BUTTONS_CONFIG, useValue: config}]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}