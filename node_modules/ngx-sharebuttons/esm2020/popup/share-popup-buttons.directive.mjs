import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { SHARE_BUTTONS } from 'ngx-sharebuttons';
import * as i0 from "@angular/core";
import * as i1 from "./share-popup.service";
import * as i2 from "ngx-sharebuttons";
export class SharePopupButtonsDirective {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.include = Object.keys(SHARE_BUTTONS);
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
        this._popupClosed = this.popupClosed.subscribe(() => this.close());
    }
    onClick(e) {
        this._sharePopup.open({
            theme: this.theme,
            include: this.include,
            exclude: this.exclude,
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            autoSetMeta: this.autoSetMeta,
            show: this.show,
            showIcon: this.showIcon,
            showText: this.showText,
            disabled: this.disabled,
            opened: this.opened,
            closed: this.closed,
            closeIcon: this.closeIcon,
            closeClick: this.popupClosed,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
    }
    ngOnDestroy() {
        this._popupClosed.unsubscribe();
    }
    close() {
        this._sharePopup.close();
    }
}
SharePopupButtonsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: SharePopupButtonsDirective, deps: [{ token: i1.SharePopupService }, { token: i2.ShareService }], target: i0.ɵɵFactoryTarget.Directive });
SharePopupButtonsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.2", type: SharePopupButtonsDirective, selector: "[shareButtonsPopup]", inputs: { theme: "theme", include: "include", exclude: "exclude", closeIcon: "closeIcon", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", show: "show", showIcon: "showIcon", showText: "showText", disabled: "disabled", hasBackdrop: "hasBackdrop", backdropClass: "backdropClass" }, outputs: { opened: "opened", closed: "closed", popupClosed: "popupClosed" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: SharePopupButtonsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[shareButtonsPopup]'
                }]
        }], ctorParameters: function () { return [{ type: i1.SharePopupService }, { type: i2.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], closeIcon: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], show: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], backdropClass: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], popupClosed: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtcG9wdXAtYnV0dG9ucy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hhcmVidXR0b25zL3BvcHVwL3NyYy9zaGFyZS1wb3B1cC1idXR0b25zLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoRyxPQUFPLEVBQWdCLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBSy9ELE1BQU0sT0FBTywwQkFBMEI7SUFzRHJDLFlBQW9CLFdBQThCLEVBQVUsTUFBb0I7UUFBNUQsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQXBEdkUsVUFBSyxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUV6QyxZQUFPLEdBQWEsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUkvQyxjQUFTLEdBQXNCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBc0JoRSx5QkFBeUI7UUFDaEIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUV6Qix3QkFBd0I7UUFDZixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBS2pCLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBSTVCLGdDQUFnQztRQUN0QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUU5QyxnQ0FBZ0M7UUFDdEIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFOUMsbURBQW1EO1FBQ3pDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUV6QyxpQkFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBR3RFLENBQUM7SUFFa0MsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQ2xDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7dUhBdkZVLDBCQUEwQjsyR0FBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBSHRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7bUlBR1UsS0FBSztzQkFBYixLQUFLO2dCQUVHLE9BQU87c0JBQWYsS0FBSztnQkFFRyxPQUFPO3NCQUFmLEtBQUs7Z0JBRUcsU0FBUztzQkFBakIsS0FBSztnQkFHRyxHQUFHO3NCQUFYLEtBQUs7Z0JBR0csS0FBSztzQkFBYixLQUFLO2dCQUdHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBR0csS0FBSztzQkFBYixLQUFLO2dCQUdHLElBQUk7c0JBQVosS0FBSztnQkFHRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLElBQUk7c0JBQVosS0FBSztnQkFHRyxRQUFRO3NCQUFoQixLQUFLO2dCQUdHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBR0csUUFBUTtzQkFBaEIsS0FBSztnQkFFRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBR0ksTUFBTTtzQkFBZixNQUFNO2dCQUdHLE1BQU07c0JBQWYsTUFBTTtnQkFHRyxXQUFXO3NCQUFwQixNQUFNO2dCQU80QixPQUFPO3NCQUF6QyxZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2hhcmVQb3B1cFNlcnZpY2UgfSBmcm9tICcuL3NoYXJlLXBvcHVwLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTaGFyZVNlcnZpY2UsIFNIQVJFX0JVVFRPTlMgfSBmcm9tICduZ3gtc2hhcmVidXR0b25zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NoYXJlQnV0dG9uc1BvcHVwXSdcbn0pXG5leHBvcnQgY2xhc3MgU2hhcmVQb3B1cEJ1dHRvbnNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHRoZW1lOiBzdHJpbmcgPSB0aGlzLl9zaGFyZS5jb25maWcudGhlbWU7XG5cbiAgQElucHV0KCkgaW5jbHVkZTogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhTSEFSRV9CVVRUT05TKTtcblxuICBASW5wdXQoKSBleGNsdWRlITogc3RyaW5nW107XG5cbiAgQElucHV0KCkgY2xvc2VJY29uOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFsnZmFzJywgJ3RpbWVzLWNpcmNsZSddO1xuXG4gIC8qKiBUaGUgc2hhcmluZyBsaW5rICovXG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgdGl0bGUgcGFyYW1ldGVyICovXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBwYXJhbWV0ZXIgKi9cbiAgQElucHV0KCkgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKiogVGhlIGltYWdlIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBQaW50ZXJlc3QgKi9cbiAgQElucHV0KCkgaW1hZ2U6IHN0cmluZztcblxuICAvKiogVGhlIHRhZ3MgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFR3aXR0ZXIgYW5kIFR1bWJsciAqL1xuICBASW5wdXQoKSB0YWdzOiBzdHJpbmc7XG5cbiAgLyoqIFNldHMgbWV0YSB0YWdzIGZyb20gZG9jdW1lbnQgaGVhZCwgdXNlZnVsIHdoZW4gU0VPIGlzIGF2YWlsYWJsZSAqL1xuICBASW5wdXQoKSBhdXRvU2V0TWV0YTogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzaG93OiBudW1iZXI7XG5cbiAgLyoqIFNob3cgYnV0dG9ucyBpY29ucyAqL1xuICBASW5wdXQoKSBzaG93SWNvbiA9IHRydWU7XG5cbiAgLyoqIFNob3cgYnV0dG9ucyB0ZXh0ICovXG4gIEBJbnB1dCgpIHNob3dUZXh0ID0gZmFsc2U7XG5cbiAgLyoqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgYnV0dG9uJ3MgY2xpY2sgaXMgZGlzYWJsZWQgKi9cbiAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCkgaGFzQmFja2Ryb3AgPSB0cnVlO1xuXG4gIEBJbnB1dCgpIGJhY2tkcm9wQ2xhc3M6IHN0cmluZztcblxuICAvKiogU2hhcmUgZGlhbG9nIG9wZW5lZCBldmVudCAqL1xuICBAT3V0cHV0KCkgb3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgLyoqIFNoYXJlIGRpYWxvZyBjbG9zZWQgZXZlbnQgKi9cbiAgQE91dHB1dCgpIGNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIC8vIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIHNoYXJlIHBvcHVwIGlzIGNsb3NlZFxuICBAT3V0cHV0KCkgcG9wdXBDbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSBfcG9wdXBDbG9zZWQgPSB0aGlzLnBvcHVwQ2xvc2VkLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNsb3NlKCkpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3NoYXJlUG9wdXA6IFNoYXJlUG9wdXBTZXJ2aWNlLCBwcml2YXRlIF9zaGFyZTogU2hhcmVTZXJ2aWNlKSB7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pIG9uQ2xpY2soZSkge1xuICAgIHRoaXMuX3NoYXJlUG9wdXAub3Blbih7XG4gICAgICB0aGVtZTogdGhpcy50aGVtZSxcbiAgICAgIGluY2x1ZGU6IHRoaXMuaW5jbHVkZSxcbiAgICAgIGV4Y2x1ZGU6IHRoaXMuZXhjbHVkZSxcbiAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UsXG4gICAgICB0YWdzOiB0aGlzLnRhZ3MsXG4gICAgICBhdXRvU2V0TWV0YTogdGhpcy5hdXRvU2V0TWV0YSxcbiAgICAgIHNob3c6IHRoaXMuc2hvdyxcbiAgICAgIHNob3dJY29uOiB0aGlzLnNob3dJY29uLFxuICAgICAgc2hvd1RleHQ6IHRoaXMuc2hvd1RleHQsXG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgIG9wZW5lZDogdGhpcy5vcGVuZWQsXG4gICAgICBjbG9zZWQ6IHRoaXMuY2xvc2VkLFxuICAgICAgY2xvc2VJY29uOiB0aGlzLmNsb3NlSWNvbixcbiAgICAgIGNsb3NlQ2xpY2s6IHRoaXMucG9wdXBDbG9zZWQsXG4gICAgICBoYXNCYWNrZHJvcDogdGhpcy5oYXNCYWNrZHJvcCxcbiAgICAgIGJhY2tkcm9wQ2xhc3M6IHRoaXMuYmFja2Ryb3BDbGFzc1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcG9wdXBDbG9zZWQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuX3NoYXJlUG9wdXAuY2xvc2UoKTtcbiAgfVxufVxuIl19