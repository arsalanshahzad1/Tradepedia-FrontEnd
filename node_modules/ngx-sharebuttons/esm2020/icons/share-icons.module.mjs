import { NgModule } from '@angular/core';
import { faFacebookF, faFacebookMessenger, faLine, faLinkedinIn, faMix, faPinterestP, faRedditAlien, faTelegramPlane, faTumblr, faTwitter, faViber, faVk, faWhatsapp, faXing } from '@fortawesome/free-brands-svg-icons';
import { faCheck, faEllipsisH, faEnvelope, faExclamation, faLink, faMinus, faPrint, faSms } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import * as i0 from "@angular/core";
import * as i1 from "@fortawesome/angular-fontawesome";
const shareIcons = [
    faFacebookF, faTwitter, faLinkedinIn, faPinterestP, faRedditAlien, faTumblr,
    faWhatsapp, faViber, faVk, faFacebookMessenger, faTelegramPlane, faMix, faXing, faSms,
    faEnvelope, faCheck, faPrint, faExclamation, faLink, faEllipsisH, faMinus, faLine
];
export class ShareIconsModule {
    constructor(iconLibrary) {
        iconLibrary.addIcons(...shareIcons);
    }
}
ShareIconsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareIconsModule, deps: [{ token: i1.FaIconLibrary }], target: i0.ɵɵFactoryTarget.NgModule });
ShareIconsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareIconsModule, imports: [FontAwesomeModule] });
ShareIconsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareIconsModule, imports: [[
            FontAwesomeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        FontAwesomeModule,
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i1.FaIconLibrary }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtaWNvbnMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXNoYXJlYnV0dG9ucy9pY29ucy9zcmMvc2hhcmUtaWNvbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNMLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQzNFLGFBQWEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQ3ZGLE1BQU0sb0NBQW9DLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVySSxPQUFPLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7OztBQUdwRixNQUFNLFVBQVUsR0FBcUI7SUFDbkMsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRO0lBQzNFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUs7SUFDckYsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU07Q0FDbEYsQ0FBQztBQU9GLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFBWSxXQUEwQjtRQUNwQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7NkdBSFUsZ0JBQWdCOzhHQUFoQixnQkFBZ0IsWUFIekIsaUJBQWlCOzhHQUdSLGdCQUFnQixZQUpsQjtZQUNQLGlCQUFpQjtTQUNsQjsyRkFFVSxnQkFBZ0I7a0JBTDVCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLGlCQUFpQjtxQkFDbEI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZmFGYWNlYm9va0YsIGZhRmFjZWJvb2tNZXNzZW5nZXIsIGZhTGluZSwgZmFMaW5rZWRpbkluLCBmYU1peCwgZmFQaW50ZXJlc3RQLFxuICBmYVJlZGRpdEFsaWVuLCBmYVRlbGVncmFtUGxhbmUsIGZhVHVtYmxyLCBmYVR3aXR0ZXIsIGZhVmliZXIsIGZhVmssIGZhV2hhdHNhcHAsIGZhWGluZ1xufSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zJztcbmltcG9ydCB7IGZhQ2hlY2ssIGZhRWxsaXBzaXNILCBmYUVudmVsb3BlLCBmYUV4Y2xhbWF0aW9uLCBmYUxpbmssIGZhTWludXMsIGZhUHJpbnQsIGZhU21zIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zJztcblxuaW1wb3J0IHsgRmFJY29uTGlicmFyeSwgRm9udEF3ZXNvbWVNb2R1bGUgfSBmcm9tICdAZm9ydGF3ZXNvbWUvYW5ndWxhci1mb250YXdlc29tZSc7XG5pbXBvcnQgeyBJY29uRGVmaW5pdGlvbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5cbmNvbnN0IHNoYXJlSWNvbnM6IEljb25EZWZpbml0aW9uW10gPSBbXG4gIGZhRmFjZWJvb2tGLCBmYVR3aXR0ZXIsIGZhTGlua2VkaW5JbiwgZmFQaW50ZXJlc3RQLCBmYVJlZGRpdEFsaWVuLCBmYVR1bWJscixcbiAgZmFXaGF0c2FwcCwgZmFWaWJlciwgZmFWaywgZmFGYWNlYm9va01lc3NlbmdlciwgZmFUZWxlZ3JhbVBsYW5lLCBmYU1peCwgZmFYaW5nLCBmYVNtcyxcbiAgZmFFbnZlbG9wZSwgZmFDaGVjaywgZmFQcmludCwgZmFFeGNsYW1hdGlvbiwgZmFMaW5rLCBmYUVsbGlwc2lzSCwgZmFNaW51cywgZmFMaW5lXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgRm9udEF3ZXNvbWVNb2R1bGUsXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgU2hhcmVJY29uc01vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGljb25MaWJyYXJ5OiBGYUljb25MaWJyYXJ5KSB7XG4gICAgaWNvbkxpYnJhcnkuYWRkSWNvbnMoLi4uc2hhcmVJY29ucyk7XG4gIH1cbn1cbiJdfQ==