import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { SHARE_BUTTONS } from 'ngx-sharebuttons';
import * as i0 from "@angular/core";
import * as i1 from "ngx-sharebuttons";
import * as i2 from "ngx-sharebuttons/button";
import * as i3 from "./expand-button";
import * as i4 from "@angular/common";
export class ShareButtons {
    constructor(_share) {
        this._share = _share;
        this._state$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(SHARE_BUTTONS).length
        });
        this._configSub$ = Subscription.EMPTY;
        this.theme = this._share.config.theme;
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
    }
    ngOnInit() {
        this.state$ = this._state$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
            const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;
            const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon,
                moreAriaLabel: state.moreAriaLabel,
                lessAriaLabel: state.lessAriaLabel
            };
        }));
        // Subscribe to share buttons config changes, This updates the component whenever a new button is added
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);
            const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.moreButtonIcon,
                lessIcon: config.lessButtonIcon,
                moreAriaLabel: config.moreButtonAriaLabel,
                lessAriaLabel: config.lessButtonAriaLabel
            });
        });
    }
    ngOnChanges(changes) {
        const shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
            (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
            (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
        if (shouldUpdate) {
            this.updateState({
                includedButtons: this.include,
                excludedButtons: this.exclude,
                shownCount: this.show
            });
        }
    }
    ngOnDestroy() {
        this._configSub$.unsubscribe();
        this._state$.complete();
    }
    updateState(state) {
        this._state$.next({ ...this._state$.value, ...state });
    }
}
ShareButtons.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareButtons, deps: [{ token: i1.ShareService }], target: i0.ɵɵFactoryTarget.Component });
ShareButtons.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: ShareButtons, selector: "share-buttons", inputs: { theme: "theme", include: "include", exclude: "exclude", show: "show", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", showIcon: "showIcon", showText: "showText", disabled: "disabled" }, outputs: { opened: "opened", closed: "closed" }, usesOnChanges: true, ngImport: i0, template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [moreAriaLabel]=\"state.moreAriaLabel\"\n                 [lessAriaLabel]=\"state.lessAriaLabel\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n", styles: [":host{display:inherit}.sb-group,.sb-button{display:inline-flex;align-items:flex-start}.sb-group{flex-wrap:wrap}\n"], components: [{ type: i2.ShareButton, selector: "share-button", inputs: ["button", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "text", "icon", "theme", "disabled"], outputs: ["opened", "closed"] }, { type: i3.ExpandButton, selector: "expand-button", inputs: ["moreIcon", "lessIcon", "expanded", "moreAriaLabel", "lessAriaLabel"], outputs: ["toggle"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareButtons, decorators: [{
            type: Component,
            args: [{ selector: 'share-buttons', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [moreAriaLabel]=\"state.moreAriaLabel\"\n                 [lessAriaLabel]=\"state.lessAriaLabel\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n", styles: [":host{display:inherit}.sb-group,.sb-button{display:inline-flex;align-items:flex-start}.sb-group{flex-wrap:wrap}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ShareService }]; }, propDecorators: { theme: [{
                type: Input
            }], include: [{
                type: Input
            }], exclude: [{
                type: Input
            }], show: [{
                type: Input
            }], url: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }], image: [{
                type: Input
            }], tags: [{
                type: Input
            }], autoSetMeta: [{
                type: Input
            }], showIcon: [{
                type: Input
            }], showText: [{
                type: Input
            }], disabled: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtYnV0dG9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvYnV0dG9ucy9zcmMvc2hhcmUtYnV0dG9ucy50cyIsIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvYnV0dG9ucy9zcmMvc2hhcmUtYnV0dG9ucy5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLE1BQU0sRUFJTixZQUFZLEVBRVosdUJBQXVCLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQW9DLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFxQm5GLE1BQU0sT0FBTyxZQUFZO0lBMER2QixZQUFvQixNQUFvQjtRQUFwQixXQUFNLEdBQU4sTUFBTSxDQUFjO1FBdkRoQyxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQWU7WUFDbEQsZUFBZSxFQUFFLEVBQUU7WUFDbkIsZUFBZSxFQUFFLEVBQUU7WUFDbkIsV0FBVyxFQUFFLEVBQUU7WUFDZixlQUFlLEVBQUUsRUFBRTtZQUNuQixRQUFRLEVBQUUsSUFBSTtZQUNkLFVBQVUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU07U0FDOUMsQ0FBQyxDQUFDO1FBRUssZ0JBQVcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBRWhDLFVBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUE2QjFDLHlCQUF5QjtRQUNoQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBRXpCLHdCQUF3QjtRQUNmLGFBQVEsR0FBRyxLQUFLLENBQUM7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O2dCQUdHLE1BQU07c0JBQWYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgRXZlbnRFbWl0dGVyLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFNoYXJlU2VydmljZSwgU2hhcmVCdXR0b25zQ29uZmlnLCBTSEFSRV9CVVRUT05TIH0gZnJvbSAnbmd4LXNoYXJlYnV0dG9ucyc7XG5cbmludGVyZmFjZSBCdXR0b25zU3RhdGUge1xuICBpbmNsdWRlZEJ1dHRvbnM/OiBzdHJpbmdbXTtcbiAgZXhjbHVkZWRCdXR0b25zPzogc3RyaW5nW107XG4gIHVzZXJCdXR0b25zPzogc3RyaW5nW107XG4gIHNlbGVjdGVkQnV0dG9ucz86IHN0cmluZ1tdO1xuICBleHBhbmRlZD86IGJvb2xlYW47XG4gIHNob3duQ291bnQ/OiBudW1iZXI7XG4gIG1vcmVJY29uPzogYW55O1xuICBsZXNzSWNvbj86IGFueTtcbiAgbW9yZUFyaWFMYWJlbD86IHN0cmluZztcbiAgbGVzc0FyaWFMYWJlbD86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc2hhcmUtYnV0dG9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaGFyZS1idXR0b25zLmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zaGFyZS1idXR0b25zLnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU2hhcmVCdXR0b25zIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgc3RhdGUkOiBPYnNlcnZhYmxlPEJ1dHRvbnNTdGF0ZT47XG4gIHByaXZhdGUgX3N0YXRlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QnV0dG9uc1N0YXRlPih7XG4gICAgaW5jbHVkZWRCdXR0b25zOiBbXSxcbiAgICBleGNsdWRlZEJ1dHRvbnM6IFtdLFxuICAgIHVzZXJCdXR0b25zOiBbXSxcbiAgICBzZWxlY3RlZEJ1dHRvbnM6IFtdLFxuICAgIGV4cGFuZGVkOiB0cnVlLFxuICAgIHNob3duQ291bnQ6IE9iamVjdC5rZXlzKFNIQVJFX0JVVFRPTlMpLmxlbmd0aFxuICB9KTtcblxuICBwcml2YXRlIF9jb25maWdTdWIkID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuXG4gIEBJbnB1dCgpIHRoZW1lID0gdGhpcy5fc2hhcmUuY29uZmlnLnRoZW1lO1xuXG4gIC8qKiBBcnJheSBvZiBpbmNsdWRlZCBidXR0b25zICovXG4gIEBJbnB1dCgpIGluY2x1ZGU6IHN0cmluZ1tdO1xuXG4gIC8qKiBBcnJheSBvZiBleGNsdWRlZCBidXR0b25zICovXG4gIEBJbnB1dCgpIGV4Y2x1ZGU6IHN0cmluZ1tdO1xuXG4gIC8qKiBOdW1iZXJzIG9mIGJ1dHRvbnMgdG8gc2hvdyAqL1xuICBASW5wdXQoKSBzaG93OiBudW1iZXI7XG5cbiAgLyoqIFRoZSBzaGFyaW5nIGxpbmsgKi9cbiAgQElucHV0KCkgdXJsOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSB0aXRsZSBwYXJhbWV0ZXIgKi9cbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuICAvKiogVGhlIGRlc2NyaXB0aW9uIHBhcmFtZXRlciAqL1xuICBASW5wdXQoKSBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gIC8qKiBUaGUgaW1hZ2UgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFBpbnRlcmVzdCAqL1xuICBASW5wdXQoKSBpbWFnZTogc3RyaW5nO1xuXG4gIC8qKiBUaGUgdGFncyBwYXJhbWV0ZXIgZm9yIHNoYXJpbmcgb24gVHdpdHRlciBhbmQgVHVtYmxyICovXG4gIEBJbnB1dCgpIHRhZ3M6IHN0cmluZztcblxuICAvKiogU2V0cyBtZXRhIHRhZ3MgZnJvbSBkb2N1bWVudCBoZWFkLCB1c2VmdWwgd2hlbiBTRU8gaXMgYXZhaWxhYmxlICovXG4gIEBJbnB1dCgpIGF1dG9TZXRNZXRhOiBib29sZWFuO1xuXG4gIC8qKiBTaG93IGJ1dHRvbnMgaWNvbnMgKi9cbiAgQElucHV0KCkgc2hvd0ljb24gPSB0cnVlO1xuXG4gIC8qKiBTaG93IGJ1dHRvbnMgdGV4dCAqL1xuICBASW5wdXQoKSBzaG93VGV4dCA9IGZhbHNlO1xuXG4gIC8qKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGJ1dHRvbidzIGNsaWNrIGlzIGRpc2FibGVkICovXG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xuXG4gIC8qKiBTaGFyZSBkaWFsb2cgb3BlbmVkIGV2ZW50ICovXG4gIEBPdXRwdXQoKSBvcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAvKiogU2hhcmUgZGlhbG9nIGNsb3NlZCBldmVudCAqL1xuICBAT3V0cHV0KCkgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2hhcmU6IFNoYXJlU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdGF0ZSQgPSB0aGlzLl9zdGF0ZSQucGlwZShcbiAgICAgIG1hcCgoc3RhdGU6IEJ1dHRvbnNTdGF0ZSkgPT4ge1xuICAgICAgICAvLyBVc2UgY29tcG9uZW50IGluY2x1ZGUgYnV0dG9ucywgb3RoZXJ3aXNlIGZhbGxiYWNrIHRvIGdsb2JhbCBpbmNsdWRlIGJ1dHRvbnNcbiAgICAgICAgY29uc3QgaW5jbHVkZWRCdXR0b25zID0gc3RhdGUuaW5jbHVkZWRCdXR0b25zICYmIHN0YXRlLmluY2x1ZGVkQnV0dG9ucy5sZW5ndGggPyBzdGF0ZS5pbmNsdWRlZEJ1dHRvbnMgOiBzdGF0ZS51c2VyQnV0dG9ucztcbiAgICAgICAgY29uc3QgdXNlckJ1dHRvbnMgPSBzdGF0ZS5leGNsdWRlZEJ1dHRvbnMgPyBpbmNsdWRlZEJ1dHRvbnMuZmlsdGVyKChidG46IHN0cmluZykgPT4gc3RhdGUuZXhjbHVkZWRCdXR0b25zLmluZGV4T2YoYnRuKSA8IDApIDogaW5jbHVkZWRCdXR0b25zO1xuICAgICAgICBjb25zdCBzZWxlY3RlZEJ1dHRvbnMgPSB1c2VyQnV0dG9ucy5zbGljZSgwLCBzdGF0ZS5leHBhbmRlZCA/IHVzZXJCdXR0b25zLmxlbmd0aCA6IHN0YXRlLnNob3duQ291bnQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVzZXJCdXR0b25zLFxuICAgICAgICAgIHNlbGVjdGVkQnV0dG9ucyxcbiAgICAgICAgICBleHBhbmRlZDogc3RhdGUuZXhwYW5kZWQsXG4gICAgICAgICAgc2hvd25Db3VudDogc3RhdGUuc2hvd25Db3VudCxcbiAgICAgICAgICBtb3JlSWNvbjogc3RhdGUubW9yZUljb24sXG4gICAgICAgICAgbGVzc0ljb246IHN0YXRlLmxlc3NJY29uLFxuICAgICAgICAgIG1vcmVBcmlhTGFiZWw6IHN0YXRlLm1vcmVBcmlhTGFiZWwsXG4gICAgICAgICAgbGVzc0FyaWFMYWJlbDogc3RhdGUubGVzc0FyaWFMYWJlbFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gU3Vic2NyaWJlIHRvIHNoYXJlIGJ1dHRvbnMgY29uZmlnIGNoYW5nZXMsIFRoaXMgdXBkYXRlcyB0aGUgY29tcG9uZW50IHdoZW5ldmVyIGEgbmV3IGJ1dHRvbiBpcyBhZGRlZFxuICAgIHRoaXMuX2NvbmZpZ1N1YiQgPSB0aGlzLl9zaGFyZS5jb25maWckLnN1YnNjcmliZSgoY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcpID0+IHtcbiAgICAgIC8vIFVzZSBnbG9iYWwgaW5jbHVkZSBidXR0b25zLCBvdGhlcndpc2UgZmFsbGJhY2sgdG8gYWxsIGJ1dHRvbnNcbiAgICAgIGNvbnN0IGluY2x1ZGVkQnV0dG9ucyA9IGNvbmZpZy5pbmNsdWRlLmxlbmd0aCA/IGNvbmZpZy5pbmNsdWRlIDogT2JqZWN0LmtleXMoU0hBUkVfQlVUVE9OUyk7XG4gICAgICBjb25zdCB1c2VyQnV0dG9ucyA9IGluY2x1ZGVkQnV0dG9ucy5maWx0ZXIoKGJ0bjogc3RyaW5nKSA9PiBjb25maWcuZXhjbHVkZS5pbmRleE9mKGJ0bikgPCAwKTtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgICAgICB1c2VyQnV0dG9ucyxcbiAgICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgICBtb3JlSWNvbjogY29uZmlnLm1vcmVCdXR0b25JY29uLFxuICAgICAgICBsZXNzSWNvbjogY29uZmlnLmxlc3NCdXR0b25JY29uLFxuICAgICAgICBtb3JlQXJpYUxhYmVsOiBjb25maWcubW9yZUJ1dHRvbkFyaWFMYWJlbCxcbiAgICAgICAgbGVzc0FyaWFMYWJlbDogY29uZmlnLmxlc3NCdXR0b25BcmlhTGFiZWxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGNvbnN0IHNob3VsZFVwZGF0ZSA9XG4gICAgICAoY2hhbmdlc1snaW5jbHVkZSddICYmIGNoYW5nZXNbJ2luY2x1ZGUnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2luY2x1ZGUnXS5wcmV2aW91c1ZhbHVlKSB8fFxuICAgICAgKGNoYW5nZXNbJ2V4Y2x1ZGUnXSAmJiBjaGFuZ2VzWydleGNsdWRlJ10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydleGNsdWRlJ10ucHJldmlvdXNWYWx1ZSkgfHxcbiAgICAgIChjaGFuZ2VzWydzaG93J10gJiYgY2hhbmdlc1snc2hvdyddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snc2hvdyddLnByZXZpb3VzVmFsdWUpO1xuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7XG4gICAgICAgIGluY2x1ZGVkQnV0dG9uczogdGhpcy5pbmNsdWRlLFxuICAgICAgICBleGNsdWRlZEJ1dHRvbnM6IHRoaXMuZXhjbHVkZSxcbiAgICAgICAgc2hvd25Db3VudDogdGhpcy5zaG93XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLl9jb25maWdTdWIkLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5fc3RhdGUkLmNvbXBsZXRlKCk7XG4gIH1cblxuICB1cGRhdGVTdGF0ZShzdGF0ZTogQnV0dG9uc1N0YXRlKSB7XG4gICAgdGhpcy5fc3RhdGUkLm5leHQoey4uLnRoaXMuX3N0YXRlJC52YWx1ZSwgLi4uc3RhdGV9KTtcbiAgfVxuXG59XG5cbi8qKlxuICogRXhwbGFuYXRpb24gb2YgdGhlIGFib3ZlIGNvZGU6XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiBJbmNsdWRlIGJ1dHRvbnM6IGluY2x1ZGVzIG9ubHkgd2FudGVkIGJ1dHRvbnMgYW5kIGV4Y2x1ZGVzIHRoZSByZXN0XG4gRXhjbHVkZSBidXR0b25zOiBleGNsdWRlcyBvbmx5IHRoZSB1bndhbnRlZCBidXR0b25zXG4gVXNlciBidXR0b25zID0gSW5jbHVkZSBidXR0b25zIC0gZXhjbHVkZSBidXR0b25zXG4gU2VsZWN0ZWQgQnV0dG9ucyA9IFVzZXIgYnV0dG9ucyBbc2hvd24gbnVtYmVyXVxuICovXG4iLCI8ZGl2ICpuZ0lmPVwic3RhdGUkIHwgYXN5bmM7IGxldCBzdGF0ZVwiIGNsYXNzPVwic2ItZ3JvdXAgc2Ite3t0aGVtZX19XCI+XG4gIDxzaGFyZS1idXR0b24gKm5nRm9yPVwibGV0IGJ1dHRvbiBvZiBzdGF0ZS5zZWxlY3RlZEJ1dHRvbnNcIlxuICAgICAgICAgICAgICAgIFtidXR0b25dPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBbdGhlbWVdPVwidGhlbWVcIlxuICAgICAgICAgICAgICAgIFt1cmxdPVwidXJsXCJcbiAgICAgICAgICAgICAgICBbdGl0bGVdPVwidGl0bGVcIlxuICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl09XCJkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgW2ltYWdlXT1cImltYWdlXCJcbiAgICAgICAgICAgICAgICBbdGFnc109XCJ0YWdzXCJcbiAgICAgICAgICAgICAgICBbYXV0b1NldE1ldGFdPVwiYXV0b1NldE1ldGFcIlxuICAgICAgICAgICAgICAgIFtzaG93SWNvbl09XCJzaG93SWNvblwiXG4gICAgICAgICAgICAgICAgW3Nob3dUZXh0XT1cInNob3dUZXh0XCJcbiAgICAgICAgICAgICAgICAob3BlbmVkKT1cIm9wZW5lZC5lbWl0KCRldmVudClcIlxuICAgICAgICAgICAgICAgIChjbG9zZWQpPVwiY2xvc2VkLmVtaXQoJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCI+XG4gIDwvc2hhcmUtYnV0dG9uPlxuICA8ZXhwYW5kLWJ1dHRvbiAqbmdJZj1cInN0YXRlLnNob3duQ291bnQgPCBzdGF0ZS51c2VyQnV0dG9ucy5sZW5ndGhcIlxuICAgICAgICAgICAgICAgICBjbGFzcz1cInNiLWJ1dHRvbiBzYi17e3RoZW1lfX1cIlxuICAgICAgICAgICAgICAgICBbZXhwYW5kZWRdPVwic3RhdGUuZXhwYW5kZWRcIlxuICAgICAgICAgICAgICAgICBbbW9yZUljb25dPVwic3RhdGUubW9yZUljb25cIlxuICAgICAgICAgICAgICAgICBbbGVzc0ljb25dPVwic3RhdGUubGVzc0ljb25cIlxuICAgICAgICAgICAgICAgICBbbW9yZUFyaWFMYWJlbF09XCJzdGF0ZS5tb3JlQXJpYUxhYmVsXCJcbiAgICAgICAgICAgICAgICAgW2xlc3NBcmlhTGFiZWxdPVwic3RhdGUubGVzc0FyaWFMYWJlbFwiXG4gICAgICAgICAgICAgICAgICh0b2dnbGUpPVwidXBkYXRlU3RhdGUoe2V4cGFuZGVkOiAkZXZlbnR9KVwiPlxuICA8L2V4cGFuZC1idXR0b24+XG48L2Rpdj5cbiJdfQ==