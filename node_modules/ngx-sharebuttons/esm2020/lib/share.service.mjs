import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { SHARE_BUTTONS_CONFIG, SharerMethod } from './share.models';
import { SHARE_BUTTONS } from './share.defaults';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
export class ShareService {
    constructor(config, _document) {
        this._document = _document;
        /** Global config that applies on all share buttons in the app */
        this.config = {
            sharerMethod: SharerMethod.Anchor,
            sharerTarget: '_blank',
            windowObj: this._document.defaultView,
            windowFuncName: 'open',
            prop: SHARE_BUTTONS,
            theme: 'default',
            include: [],
            exclude: [],
            autoSetMeta: true,
            windowWidth: 800,
            windowHeight: 500,
            moreButtonIcon: 'ellipsis-h',
            lessButtonIcon: 'minus',
            moreButtonAriaLabel: 'Show more share buttons',
            lessButtonAriaLabel: 'Show less share buttons'
        };
        /** Stream that emits when config changes */
        this.config$ = new BehaviorSubject(this.config);
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Share buttons properties, used to get the text, color and icon of each button.
     */
    get prop() {
        return this.config.prop;
    }
    get windowSize() {
        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;
    }
    setConfig(config) {
        this.config = mergeDeep(this.config, config);
        this.config$.next(this.config);
    }
    addButton(name, props) {
        this.setConfig({
            prop: {
                [name]: props
            }
        });
    }
}
ShareService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareService, deps: [{ token: SHARE_BUTTONS_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
ShareService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: ShareService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [SHARE_BUTTONS_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvc3JjL2xpYi9zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQWdCLG9CQUFvQixFQUFzQixZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7QUFLcEMsTUFBTSxPQUFPLFlBQVk7SUF3QnZCLFlBQXNELE1BQTBCLEVBQTRCLFNBQWM7UUFBZCxjQUFTLEdBQVQsU0FBUyxDQUFLO1FBdEIxSCxpRUFBaUU7UUFDakUsV0FBTSxHQUF1QjtZQUMzQixZQUFZLEVBQUUsWUFBWSxDQUFDLE1BQU07WUFDakMsWUFBWSxFQUFFLFFBQVE7WUFDdEIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVztZQUNyQyxjQUFjLEVBQUUsTUFBTTtZQUN0QixJQUFJLEVBQUUsYUFBYTtZQUNuQixLQUFLLEVBQUUsU0FBUztZQUNoQixPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sRUFBRSxFQUFFO1lBQ1gsV0FBVyxFQUFFLElBQUk7WUFDakIsV0FBVyxFQUFFLEdBQUc7WUFDaEIsWUFBWSxFQUFFLEdBQUc7WUFDakIsY0FBYyxFQUFFLFlBQVk7WUFDNUIsY0FBYyxFQUFFLE9BQU87WUFDdkIsbUJBQW1CLEVBQUUseUJBQXlCO1lBQzlDLG1CQUFtQixFQUFFLHlCQUF5QjtTQUMvQyxDQUFDO1FBRUYsNENBQTRDO1FBQzVDLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFHekMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxTQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBWSxZQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBYSxFQUFFLENBQUM7SUFDcEYsQ0FBQztJQUVELFNBQVMsQ0FBQyxNQUEwQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxLQUFtQjtRQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsSUFBSSxFQUFFO2dCQUNKLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSzthQUNkO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7eUdBcERVLFlBQVksa0JBd0JTLG9CQUFvQiw2QkFBc0MsUUFBUTs2R0F4QnZGLFlBQVksY0FGWCxNQUFNOzJGQUVQLFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkF5QmMsUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxvQkFBb0I7OzBCQUErQixNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElTaGFyZUJ1dHRvbiwgU0hBUkVfQlVUVE9OU19DT05GSUcsIFNoYXJlQnV0dG9uc0NvbmZpZywgU2hhcmVyTWV0aG9kIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xuaW1wb3J0IHsgU0hBUkVfQlVUVE9OUyB9IGZyb20gJy4vc2hhcmUuZGVmYXVsdHMnO1xuaW1wb3J0IHsgbWVyZ2VEZWVwIH0gZnJvbSAnLi91dGlscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNoYXJlU2VydmljZSB7XG5cbiAgLyoqIEdsb2JhbCBjb25maWcgdGhhdCBhcHBsaWVzIG9uIGFsbCBzaGFyZSBidXR0b25zIGluIHRoZSBhcHAgKi9cbiAgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcgPSB7XG4gICAgc2hhcmVyTWV0aG9kOiBTaGFyZXJNZXRob2QuQW5jaG9yLFxuICAgIHNoYXJlclRhcmdldDogJ19ibGFuaycsXG4gICAgd2luZG93T2JqOiB0aGlzLl9kb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB3aW5kb3dGdW5jTmFtZTogJ29wZW4nLFxuICAgIHByb3A6IFNIQVJFX0JVVFRPTlMsXG4gICAgdGhlbWU6ICdkZWZhdWx0JyxcbiAgICBpbmNsdWRlOiBbXSxcbiAgICBleGNsdWRlOiBbXSxcbiAgICBhdXRvU2V0TWV0YTogdHJ1ZSxcbiAgICB3aW5kb3dXaWR0aDogODAwLFxuICAgIHdpbmRvd0hlaWdodDogNTAwLFxuICAgIG1vcmVCdXR0b25JY29uOiAnZWxsaXBzaXMtaCcsXG4gICAgbGVzc0J1dHRvbkljb246ICdtaW51cycsXG4gICAgbW9yZUJ1dHRvbkFyaWFMYWJlbDogJ1Nob3cgbW9yZSBzaGFyZSBidXR0b25zJyxcbiAgICBsZXNzQnV0dG9uQXJpYUxhYmVsOiAnU2hvdyBsZXNzIHNoYXJlIGJ1dHRvbnMnXG4gIH07XG5cbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gY29uZmlnIGNoYW5nZXMgKi9cbiAgY29uZmlnJCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5jb25maWcpO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoU0hBUkVfQlVUVE9OU19DT05GSUcpIGNvbmZpZzogU2hhcmVCdXR0b25zQ29uZmlnLCBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIF9kb2N1bWVudDogYW55KSB7XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hhcmUgYnV0dG9ucyBwcm9wZXJ0aWVzLCB1c2VkIHRvIGdldCB0aGUgdGV4dCwgY29sb3IgYW5kIGljb24gb2YgZWFjaCBidXR0b24uXG4gICAqL1xuICBnZXQgcHJvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvcDtcbiAgfVxuXG4gIGdldCB3aW5kb3dTaXplKCkge1xuICAgIHJldHVybiBgd2lkdGg9JHsgdGhpcy5jb25maWcud2luZG93V2lkdGggfSwgaGVpZ2h0PSR7IHRoaXMuY29uZmlnLndpbmRvd0hlaWdodCB9YDtcbiAgfVxuXG4gIHNldENvbmZpZyhjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gbWVyZ2VEZWVwKHRoaXMuY29uZmlnLCBjb25maWcpO1xuICAgIHRoaXMuY29uZmlnJC5uZXh0KHRoaXMuY29uZmlnKTtcbiAgfVxuXG4gIGFkZEJ1dHRvbihuYW1lOiBzdHJpbmcsIHByb3BzOiBJU2hhcmVCdXR0b24pIHtcbiAgICB0aGlzLnNldENvbmZpZyh7XG4gICAgICBwcm9wOiB7XG4gICAgICAgIFtuYW1lXTogcHJvcHNcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=